{"name":"Oblivionjs","tagline":"A Typescript virtual interpreter.","body":"#OblivionJS\r\n\r\nOblivionJS is a virtual machine written in TypeScript. The VM is primarily being developed for the [Oblivion Language](https://jweinst1.gitbooks.io/the-oblivion-language/content/). However, the VM can be used for the implementation of other languages. OblivionJS uses simple, straight forward sets of opcodes, as opposed to non-readable sets of bytecodes. This way, compilers can output an ASCII string containing the opcodes, instead of containers of bytes.\r\n\r\n###Op Code Format\r\n\r\nThe Op codes for OblivionJS follow a three character format, followed by a `->` seperator, and then the corrseponding value associated with the code. Each opcode is sepereate by a white space. Here are the basic arithmetic codes:\r\n\r\n```\r\nint........creates an integer\r\nadd........increments the integer by a number\r\nsub........decrements the integer by a number\r\nmul........multiplies the integer by a number\r\ndiv........divides the integer by a number\r\nrem........sets the integer equal to the modulo remainder by a number\r\n```\r\n\r\nSo here is an example:\r\n\r\n```\r\nint->4 add->3 mul->2\r\n\r\nThis assembles the integer 14.\r\n```\r\n\r\nOblivionJS will also support other primitive types and common collections\r\n \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}